#	pragma push_macro("FORCE_INLINE")
#	define FORCE_INLINE       static inline __attribute__((always_inline))
#	define FORCE_INLINE       static inline
FORCE_INLINE float _mm_cvtss_f32(__m128 a)
FORCE_INLINE __m128i _mm_setzero_si128()
FORCE_INLINE __m128 _mm_setzero_ps(void)
FORCE_INLINE __m128 _mm_set1_ps(float _w)
FORCE_INLINE __m128 _mm_set_ps1(float _w)
FORCE_INLINE __m128 _mm_set_ps(float w, float z, float y, float x)
FORCE_INLINE __m128 _mm_setr_ps(float w, float z , float y , float x ) 
FORCE_INLINE __m128i _mm_setr_epi32(int i3, int i2, int i1, int i0)
FORCE_INLINE __m128i _mm_set1_epi8(char w)
FORCE_INLINE __m128i _mm_set1_epi16(short w)
FORCE_INLINE __m128i _mm_set_epi16(short i7, short i6, short i5, short i4, short i3, short i2, short i1, short i0)
FORCE_INLINE __m128i _mm_set1_epi32(int _i)
FORCE_INLINE __m128i _mm_set_epi32(int i3, int i2, int i1, int i0)
FORCE_INLINE void _mm_store_ps(float *p, __m128 a)
FORCE_INLINE void _mm_storeu_ps(float *p, __m128 a)
FORCE_INLINE void _mm_store_si128(__m128i *p, __m128i a)
FORCE_INLINE void _mm_storeu_si128(__m128i *p, __m128i a)
FORCE_INLINE void _mm_store_ss(float *p, __m128 a)
FORCE_INLINE void _mm_storel_epi64(__m128i* a, __m128i b)
FORCE_INLINE __m128 _mm_load1_ps(const float * p)
FORCE_INLINE __m128 _mm_load_ps(const float * p)
FORCE_INLINE __m128 _mm_loadu_ps(const float * p)
FORCE_INLINE __m128 _mm_load_ss(const float * p)
FORCE_INLINE __m128 _mm_cmpneq_ps(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_andnot_ps(__m128 a, __m128 b)
FORCE_INLINE __m128i _mm_andnot_si128(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_and_si128(__m128i a, __m128i b)
FORCE_INLINE __m128 _mm_and_ps(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_or_ps(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_xor_ps(__m128 a, __m128 b)
FORCE_INLINE __m128i _mm_or_si128(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_xor_si128(__m128i a, __m128i b)
FORCE_INLINE int _mm_movemask_ps(__m128 a)
FORCE_INLINE __m128 _mm_shuffle_ps_1032(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_2301(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_0321(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_2103(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_1010(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_1001(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_0101(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_3210(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_0011(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_0022(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_2200(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_3202(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_1133(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_2010(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_2001(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_2032(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_shuffle_ps_default(__m128 a, __m128 b, __constrange(0,255) int imm)
//FORCE_INLINE __m128 _mm_shuffle_ps(__m128 a, __m128 b, __constrange(0,255) int imm)
FORCE_INLINE __m128i _mm_shuffle_epi_1032(__m128i a)
FORCE_INLINE __m128i _mm_shuffle_epi_2301(__m128i a)
FORCE_INLINE __m128i _mm_shuffle_epi_0321(__m128i a)
FORCE_INLINE __m128i _mm_shuffle_epi_2103(__m128i a)
FORCE_INLINE __m128i _mm_shuffle_epi_1010(__m128i a)
FORCE_INLINE __m128i _mm_shuffle_epi_1001(__m128i a)
FORCE_INLINE __m128i _mm_shuffle_epi_0101(__m128i a)
FORCE_INLINE __m128i _mm_shuffle_epi_2211(__m128i a)
FORCE_INLINE __m128i _mm_shuffle_epi_0122(__m128i a)
FORCE_INLINE __m128i _mm_shuffle_epi_3332(__m128i a)
//FORCE_INLINE __m128i _mm_shuffle_epi32_default(__m128i a, __constrange(0,255) int imm)
FORCE_INLINE __m128i _mm_shuffle_epi32_default(__m128i a, __constrange(0,255) int imm)
//FORCE_INLINE __m128i _mm_shuffle_epi32_splat(__m128i a, __constrange(0,255) int imm)
//FORCE_INLINE __m128i _mm_shuffle_epi32(__m128i a, __constrange(0,255) int imm)
//FORCE_INLINE __m128i _mm_shufflehi_epi16_function(__m128i a, __constrange(0,255) int imm)
//FORCE_INLINE __m128i _mm_shufflehi_epi16(__m128i a, __constrange(0,255) int imm)
//FORCE_INLINE __m128i _mm_slli_epi32(__m128i a, __constrange(0,255) int imm)
//FORCE_INLINE __m128i _mm_srli_epi32(__m128i a, __constrange(0,255) int imm)
//FORCE_INLINE __m128i _mm_srai_epi32(__m128i a, __constrange(0,255) int imm)
//FORCE_INLINE _mm_srli_si128(__m128i a, __constrange(0,255) int imm)
//FORCE_INLINE __m128i _mm_slli_si128(__m128i a, __constrange(0,255) int imm)
FORCE_INLINE int _mm_movemask_epi8(__m128i _a)
FORCE_INLINE __m128 _mm_sub_ps(__m128 a, __m128 b)
FORCE_INLINE __m128i _mm_sub_epi32(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_sub_epi16(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_sub_epi8(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_subs_epu16(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_subs_epu8(__m128i a, __m128i b)
FORCE_INLINE __m128 _mm_add_ps(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_add_ss(__m128 a, __m128 b)
FORCE_INLINE __m128i _mm_add_epi32(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_add_epi16(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_add_epi8(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_adds_epi16(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_adds_epu8(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_mullo_epi16(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_mullo_epi32(__m128i a, __m128i b)
FORCE_INLINE __m128 _mm_mul_ps(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_div_ps(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_div_ss(__m128 a, __m128 b)
FORCE_INLINE __m128 recipq_newton(__m128 in, int n)
FORCE_INLINE __m128 _mm_rcp_ps(__m128 in)
FORCE_INLINE __m128 _mm_sqrt_ps(__m128 in)
FORCE_INLINE __m128 _mm_sqrt_ss(__m128 in)
FORCE_INLINE __m128 _mm_rsqrt_ps(__m128 in)
FORCE_INLINE __m128 _mm_max_ps(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_min_ps(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_max_ss(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_min_ss(__m128 a, __m128 b)
FORCE_INLINE __m128i _mm_max_epu8(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_min_epu8(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_min_epi16(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_max_epi16(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_max_epi32(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_min_epi32(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_mulhi_epi16(__m128i a, __m128i b)
FORCE_INLINE __m128 _mm_hadd_ps(__m128 a, __m128 b ) 
FORCE_INLINE __m128 _mm_cmplt_ps(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_cmpgt_ps(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_cmpge_ps(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_cmple_ps(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_cmpeq_ps(__m128 a, __m128 b)
FORCE_INLINE __m128i _mm_cmpeq_epi8 (__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_cmpeq_epi16 (__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_cmplt_epi8 (__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_cmpgt_epi8 (__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_cmpgt_epi16 (__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_cmplt_epi32(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_cmpgt_epi32(__m128i a, __m128i b)
FORCE_INLINE __m128 _mm_cmpord_ps(__m128 a, __m128 b ) 
FORCE_INLINE int _mm_comilt_ss(__m128 a, __m128 b)
FORCE_INLINE int _mm_comigt_ss(__m128 a, __m128 b)
FORCE_INLINE int _mm_comile_ss(__m128 a, __m128 b)
FORCE_INLINE int _mm_comige_ss(__m128 a, __m128 b)
FORCE_INLINE int _mm_comieq_ss(__m128 a, __m128 b)
FORCE_INLINE int _mm_comineq_ss(__m128 a, __m128 b)
FORCE_INLINE __m128i _mm_cvttps_epi32(__m128 a)
FORCE_INLINE __m128 _mm_cvtepi32_ps(__m128i a)
FORCE_INLINE __m128i _mm_cvtepu8_epi32(__m128i a)
FORCE_INLINE __m128i _mm_cvtepi16_epi32(__m128i a)
FORCE_INLINE __m128i _mm_cvtps_epi32(__m128 a)
FORCE_INLINE int _mm_cvtsi128_si32(__m128i a)
FORCE_INLINE __m128i _mm_cvtsi32_si128(int a)
FORCE_INLINE __m128i _mm_castps_si128(__m128 a)
FORCE_INLINE __m128 _mm_castsi128_ps(__m128i a)
FORCE_INLINE __m128i _mm_load_si128(const __m128i *p)
FORCE_INLINE __m128i _mm_loadu_si128(const __m128i *p)
FORCE_INLINE __m128i _mm_packs_epi16(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_packus_epi16(const __m128i a, const __m128i b)
FORCE_INLINE __m128i _mm_packs_epi32(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_unpacklo_epi8(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_unpacklo_epi16(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_unpacklo_epi32(__m128i a, __m128i b)
FORCE_INLINE __m128 _mm_unpacklo_ps(__m128 a, __m128 b)
FORCE_INLINE __m128 _mm_unpackhi_ps(__m128 a, __m128 b)
FORCE_INLINE __m128i _mm_unpackhi_epi8(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_unpackhi_epi16(__m128i a, __m128i b)
FORCE_INLINE __m128i _mm_unpackhi_epi32(__m128i a, __m128i b)
//FORCE_INLINE int _mm_extract_epi16(__m128i a, __constrange(0,8) int imm)
//FORCE_INLINE __m128i _mm_insert_epi16(__m128i a, const int b, __constrange(0,8) int imm)
FORCE_INLINE void _mm_sfence(void)
FORCE_INLINE void _mm_stream_si128(__m128i *p, __m128i a)
FORCE_INLINE void _mm_clflush(void const*p) 
#	pragma pop_macro("FORCE_INLINE")
